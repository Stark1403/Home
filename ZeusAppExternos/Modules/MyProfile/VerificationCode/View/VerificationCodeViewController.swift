//
//  VerificationCodeViewController.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 11/21/24.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem
import ZeusSessionInfo

public protocol VerificationCodeDelegate {
    func codeSuccess(success: Bool)
}

class VerificationCodeViewController: ZDSUDNViewController {
    var presenter: VerificationCodePresenterProtocol?
    
    /// Views for this controller
    lazy var mainView = VerificationCodeView(controller: self)
    public var delegate: VerificationCodeDelegate?
    var number = ""
    let minutes: TimeInterval = 3*60
    var timer: Timer?
    var dateConsumption: Date?
    var code = ""
    var countTry = 1

    override func backAction() {
        guard let rooVC = self.navigationController?.viewControllers.first(where: {$0 is MyProfileViewController}) else { return }
        self.navigationController?.popToViewController(rooVC, animated: true)
    }
    
    override func viewDidLoad() {
        setName()
        super.viewDidLoad()
        view = mainView
        setupGestures()
        setup()
        self.hideKeyboardWhenTappedAround()
        NotificationCenter.default.addObserver(self, selector: #selector(validateButton), name: UITextField.textDidEndEditingNotification, object: nil)
    }
    
    private func setupGestures() {
        mainView.validationCode.onFilled = { code in
            self.view.endEditing(true)
        }
        
        mainView.verifyBtn.onClick = {
            if self.countTry < 5 {
                self.presenter?.verificationCode(code: self.code)
            }else{
                ZDSToastManager.shared.show(message: "¡Excediste el número de intentos! Inténtalo más tarde", style: .error, duration: 3)
                UserDefaults.standard.set(Date(), forKey: UserDefaultsKey.MyProfile.rawValue)
            }
        }
        
        let forward = UITapGestureRecognizer(target: self, action: #selector(forwardVerifi))
        mainView.forwardLabel.addGestureRecognizer(forward)
        mainView.forwardLabel.isUserInteractionEnabled = true
    }
    
    private func setName(){
        view.backgroundColor = .white
        headerColor = SessionInfo.shared.company?.primaryUIColor
        navigationBarColor = .white
        style = .statusAndNavBarStyle(.medium)
        backString = "Mi cuenta"
        titleString = "Autenticación"
    }
    
    private func setup(){
        mainView.titleLabel.text = "Ingresa el código de verificación que enviamos a tu celular +*******\(String(number.suffix(4)))"
        mainView.forwardLabel.text = "Reenviar código en 3 min (3:00)"
        startTimer()
    }
    
    private func startTimer() {
        dateConsumption = Date()
        timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(updateTime), userInfo: nil, repeats: true)
    }
    
    private func stopTimer() {
        timer?.invalidate()
        timer = nil
    }
    
    @objc func forwardVerifi(){
        if countTry < 5 {
            countTry += 1
            print("intento: \(countTry)")
            startTimer()
            presenter?.sendVerification(number: number)
        }else{
            ZDSToastManager.shared.show(message: "¡Excediste el número de intentos! Inténtalo más tarde", style: .error, duration: 3)
            UserDefaults.standard.set(Date(), forKey: UserDefaultsKey.MyProfile.rawValue)
        }
    }
    
    @objc func updateTime() {
        if let current = dateConsumption {
            let interval: TimeInterval = Date().timeIntervalSince(current)
            if interval < minutes {
                let remaining: TimeInterval = minutes - interval
                let mins: Int = Int(remaining / 60)
                let secs: Int = Int(remaining) % 60
                DispatchQueue.main.async {
                    let time = String(format: "%02d",secs)
                    self.mainView.forwardLabel.text = "Reenviar código en 3 min (\(mins):\(time))"
                    self.mainView.forwardLabel.textColor = .mid500
                    self.mainView.underlineView.isHidden = true
                    self.mainView.forwardLabel.isUserInteractionEnabled = false
                }
            } else {
                DispatchQueue.main.async {
                    self.mainView.forwardLabel.text = "Reenviar código"
                    self.mainView.forwardLabel.textColor = SessionInfo.shared.company?.primaryUIColor
                    self.mainView.underlineView.isHidden = false
                    self.stopTimer()
                    self.mainView.forwardLabel.isUserInteractionEnabled = true
                }
            }
        }
    }
    
    @objc func validateButton(){
        let codeString = mainView.validationCode.content
        if codeString.count == 6{
            mainView.verifyBtn.disabled = false
            mainView.errorLabel.isHidden = true
        }else{
            mainView.verifyBtn.disabled = true
            mainView.errorLabel.isHidden = true
        }
    }
}

extension VerificationCodeViewController: VerificationCodeViewProtocol {
    func showLoading() {
        showDSLoader()
    }
    
    func removeLoading() {
        hideDSLoader()
    }
    
    func resultSendVerify(success: Bool) {
        if !success{
            countTry = 5
            ZDSToastManager.shared.show(message: "¡Excediste el número de intentos! Inténtalo más tarde", style: .error, duration: 3)
            UserDefaults.standard.set(Date(), forKey: UserDefaultsKey.MyProfile.rawValue)
        }
    }
    
    func resultVerifyCode(success: Bool) {
        if success{
            ZDSToastManager.shared.show(message: "El número de teléfono se actualizó correctamente", style: .success, duration: 3)
            mainView.errorLabel.isHidden = true
            UserDefaults.standard.removeObject(forKey: UserDefaultsKey.MyProfile.rawValue)
            self.delegate?.codeSuccess(success: true)
            self.navigationController?.popViewController(animated: false)
        }else{
            mainView.errorLabel.isHidden = false
            mainView.validationCode.state = .error
        }
    }
    
    func failAlert(){
        var alert = ZDSAlert()
        alert.primaryColor = headerColor ?? .purple
        alert.title = "¡Oops! Algo pasó"
        alert.message = "La acción no se pudo completar correctamente. Inténtalo de nuevo."
        alert.primaryTitle = "Aceptar"
        
        alert.style = .error
        let view = alert.asUIKitViewController()
        view.modalPresentationStyle = .overCurrentContext
        view.modalTransitionStyle = .crossDissolve
        view.view.backgroundColor = .backgroundTransparency
        
        alert.onPrimaryAction = {
            view.dismiss(animated: true)
            self.backAction()
        }
        
        self.present(view, animated: true) {}
    }
}
