//
//  EmploymentDataView.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 12/31/24.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem

class EmploymentDataView: UIView {
    // MARK: Child views
    lazy var mainContainerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        return view
    }()
    
    lazy var mainScrollView: UIScrollView = {
        let sv = UIScrollView()
        sv.translatesAutoresizingMaskIntoConstraints = false
        return sv
    }()
    
    lazy var workAreaTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "√Årea"
        tf.allowedCharacters = CharacterSet.letters.union(.whitespaces)
        tf.disabled = true
        return tf
    }()
    
    lazy var positionTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Puesto"
        tf.allowedCharacters = CharacterSet.letters.union(.whitespaces)
        tf.disabled = true
        return tf
    }()
    
    
    lazy var stateTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Estado donde labora"
        tf.disabled = true
        return tf
    }()
    
    lazy var branchTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Sucursal"
        tf.disabled = true
        return tf
    }()
    
    lazy var dischargeDateTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Fecha de alta"
        tf.disabled = true
        return tf
    }()
    
    lazy var vacationsTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Vacaciones"
        tf.allowedCharacters = .alphanumerics
        tf.disabled = true
        return tf
    }()
    
    lazy var inputsStackView: UIStackView = {
        let sv = UIStackView()
        sv.translatesAutoresizingMaskIntoConstraints = false
        sv.axis = .vertical
        sv.distribution = .fillEqually
        sv.spacing = .mediumA
        sv.addArrangedSubview(workAreaTF.asUIKitView())
        sv.addArrangedSubview(positionTF.asUIKitView())
        sv.addArrangedSubview(stateTF.asUIKitView())
        sv.addArrangedSubview(branchTF.asUIKitView())
        sv.addArrangedSubview(dischargeDateTF.asUIKitView())
        sv.addArrangedSubview(vacationsTF.asUIKitView())
        return sv
    }()
    
    // MARK: Initializers
    init() {
        super.init(frame: .zero)
        addViews()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
