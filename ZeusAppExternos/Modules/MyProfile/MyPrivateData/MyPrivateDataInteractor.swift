//
//  MyPrivateDataInteractor.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 11/5/24.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusSessionInfo
import UPAXNetworking
import ZeusServiceCoordinator

class MyPrivateDataInteractor: MyPrivateDataInteractorInputProtocol {
    
    
    weak var presenter: MyPrivateDataInteractorOutputProtocol?
    private let networking = ZeusV2NetworkManager.shared.networking
    private var stateData : [StateData] = []
    private var isLoaded : Bool = false
    func consultStates() {
    
        let url = "https:api-colaborador.talentozeus-dev.com.mx/colaborador/0/geographic-data"
        self.networking.call(url: url, method: .get) { (_ result: Swift.Result<StateDataResponse, NetError>) in
            switch result {
            case .success(let result):
                print(result)
                guard let data = result.stateDataResponse else { return }
                self.stateData = data
                self.isLoaded = true
                break
            case .failure(let error):
                self.isLoaded = false
                print(error)
                break
            }
        }
    }
    
    func consultCP(CP: String){
        if !isLoaded {
            consultStates()
        }
        let params = CPParams(CP: String(CP))
        //API.baseURL.absoluteString +
        let url = "https://api-colaborador.talentozeus-dev.com.mx/kpis/postalcodes/\(CP)"
        self.networking.call(url: url, method: .get) { (_ result: Swift.Result<CPResponse, NetError>) in
            switch result {
            case .success(let result):
                print(result)
                guard var data = result.postalcode else { return }
                let stateName = self.stateData.first { $0.id == data.stateId }
                data.stateName = stateName?.description
                self.presenter?.setInformationCP(CPResponse: data, CP: String(CP))
                break
            case .failure(let error):
                print(error)
                self.presenter?.CPInvalid()
                break
            }
        }
    }
    
    func getPrivateData(){
        guard let collaboratorId = SessionInfo.shared.user?.zeusId else { return }
        print(collaboratorId)
        let pathParams = MyPrivateDataParams(collaboratorId: collaboratorId)
        let url = API.baseURL.absoluteString + "/v2/colaborador/{collaboratorId}/personal-information"
        self.networking.call(url: url, method: .get ,pathParams: pathParams) { (_ result: Swift.Result<PersonalDataResponse, NetError>) in
            switch result {
            case .success(let result):
                print(result)
                guard let information = result.personalInformation else { return }
                self.presenter?.setPrivateData(data: information)
                break
            case .failure(let error):
                switch error {
                case .invalidResponse(_, let error):
                    self.presenter?.setInformationError()
                    MyPrivateDataEvents.shared.sendEvent(.screenError(idRequest: error?.requestID ?? ""))
                    break
                default:
                    self.presenter?.setInformationError()
                    break
                }
                break
            }
        }
    }
    
    func updateAdress(adress: AddressRequest){
        MyPrivateDataEvents.shared.sendEvent(.updateAddress(data: "\(adress)"))
        let url = API.baseURL.absoluteString + "/v2/colaborador/datos/direccion"
        self.networking.call(url: url, method: .put , body: adress) { (_ result: Swift.Result<AddressResponse, NetError>) in
            switch result {
            case .success(let result):
                print(result)
                if let info = result.address {
                    self.presenter?.resultUpdateAddress(address: info)
                }else{
                    self.presenter?.resultUpdateAddress(address: nil)
                }
                break
            case .failure(let error):
                switch error {
                case .invalidResponse(_, let error):
                    MyPrivateDataEvents.shared.sendEvent(.updateAddressError(idRequest: error?.requestID ?? ""))
                    self.presenter?.resultUpdateAddress(address: nil)
                    break
                default:
                    self.presenter?.resultUpdateAddress(address: nil)
                    break
                }
                break
            }
        }
    }
}

struct MyPrivateDataParams: UNCodable {
    let collaboratorId: String
    
    public func getUNCodingKeys() -> [UNCodingKey] {
        return [
            .init(property: "collaboratorId", requiresEncryption: true)
        ]
    }
}

struct CPParams: UNCodable {
    let CP: String
    
    public func getUNCodingKeys() -> [UNCodingKey] {
        return [
            .init(property: "CP", requiresEncryption: false)
        ]
    }
}
