//
//  MyPrivateDataViewController.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 11/5/24.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem
import ZeusSessionInfo

class MyPrivateDataViewController: ZDSUDNViewController {
    var presenter: MyPrivateDataPresenterProtocol?
    
    /// Views for this controller
    let mainView = MyPrivateDataView()
    var editAlert = false
    var isCPEdit = false
    private var privateData : PersonalInformation?
    private var cpValido = false
    var addressNew = AddressData(id: 0,
                                 street: "",
                                 out_number: "",
                                 interior_number: nil,
                                 colony: GenericID(id: 0, description: ""),
                                 zip: nil,
                                 municipality: GenericID(id: 0, description: ""),
                                 state: GenericID(id: 0, description: ""))
    
    override func backAction() {
        MyPrivateDataEvents.shared.sendEvent(.back)
        if editAlert{
            goOutAlert()
        }else{
            super.backAction()
        }
    }
    override func viewDidLoad() {
        setName()
        super.viewDidLoad()
        view = mainView
        setupUI()
        setupGestures()
        MyPrivateDataEvents.shared.sendEvent(.screenView)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        style = .statusAndNavBarStyle(.small)
        navigationController?.navigationBar.prefersLargeTitles = false
        titleString = ""
        super.viewWillDisappear(animated)
        ZDSToastManager.shared.hideAllToast()
    }
    
    private func setName(){
        headerColor = SessionInfo.shared.company?.primaryUIColor
        style = .statusAndNavBarStyle(.medium)
        navigationBarColor = .white
        backString = "Mi cuenta"
        titleString = "Mis datos privados"
        view.backgroundColor = .white
    }
    
    private func setupGestures() {
        mainView.segmentedController.didTapSegment = onSegmentedValueChanged
        mainView.updateBtn.onClick = {
            self.actionButton()
        }
        self.hideKeyboardWhenTappedAround()
        
        mainView.streetField.onChanged = { [weak self] text in
            self?.validateDataStreet()
        }
        
        mainView.streetField.onFocusChanged = { [weak self] focus in
            if focus == false {
                self?.validateDataStreet()
            }
        }
        
        mainView.outerNumberField.onChanged = { [weak self] text in
            self?.validateDataOuterNumber()
        }
        
        mainView.outerNumberField.onFocusChanged = { [weak self] focus in
            if focus == false {
                self?.validateDataOuterNumber()
            }
        }
        
        mainView.interiorNumberField.onChanged = { [weak self] text in
            self?.validateinteriorNumber()
        }
        
        mainView.CPField.onChanged = { [weak self] text in
            self?.validateCP()
        }
        
        mainView.CPField.onFocusChanged = { [weak self] focus in
            if focus == false {
                self?.validateCPFocus()
            }
        }
    }
    
    private func setupUI(){
        mainView.privateDataView.setup()
        mainView.privateDataView.isHidden = false
        mainView.addressView.isHidden = true
        mainView.dropDown.delegate = self
        presenter?.getPrivateData()
    }
    
    private func setData(){
        guard let data = privateData?.privateDate else { return }
        guard let adress = privateData?.address else { return }
        mainView.privateDataView.setData(data: data)
        
        addressNew.street = adress.street ?? ""
        addressNew.state?.id = adress.state?.id ?? 0
        addressNew.out_number = adress.out_number ?? ""
        addressNew.interior_number = adress.interior_number
        addressNew.zip = adress.zip
        addressNew.state?.description = adress.state?.description
        addressNew.municipality?.description = adress.municipality?.description
        addressNew.colony?.description = adress.colony?.description
        
        if let adress = adress.street {
            mainView.streetField.text = adress
        }
        
        if let outNumber = adress.out_number {
            mainView.outerNumberField.text = outNumber
        }
        
        mainView.interiorNumberField.text = adress.interior_number ?? ""
        mainView.CPField.text = adress.zip ?? ""
        mainView.municipalityField.text = adress.municipality?.description ?? ""
        mainView.stateField.text = adress.state?.description ?? ""
        mainView.dropDown.setupItem(.init(text: adress.colony?.description ?? ""))
    }
    
    lazy var onSegmentedValueChanged: (_ indexValue: Int) -> Void = { [weak self] (indexValue) in
        guard let self = self else { return }
        switch indexValue {
        case 0:
            MyPrivateDataEvents.shared.sendEvent(.privateData)
            mainView.privateDataView.isHidden = false
            mainView.addressView.isHidden = true
        case 1:
            MyPrivateDataEvents.shared.sendEvent(.address)
            mainView.addressView.isHidden = false
            mainView.privateDataView.isHidden = true
        default:
            print("default")
            break
        }
    }
    
    private func setColony(colonys: [GenericIDCP]?){
        guard let colonys = colonys, let adress = privateData?.address  else {return}
        if colonys.count > 0 {
            
            if let posicion = colonys.firstIndex(where: { $0.name == addressNew.colony?.description }) {
                mainView.dropDown.setupItem(.init(text: colonys[posicion].name ?? ""))
                addressNew.colony?.description = colonys[posicion].name ?? ""
            } else {
                mainView.dropDown.setupItem(.init(text: colonys[0].name ?? ""))
                addressNew.colony?.description = colonys[0].name ?? ""
            }
            
            var data: [ZDSDropdownViewCell.Model] = []
            for colony in colonys {
                data.append(.init(text: colony.name ?? ""))
            }
            mainView.dropDown.data = data
        }
        validateUpdateData()
    }
    
    func validateDataStreet() {
        if mainView.streetField.text == ""  {
            mainView.streetField.state = .error
            mainView.streetField.helpText = "Campo obligatorio"
        } else {
            mainView.streetField.helpText = ""
            mainView.streetField.state = .none
        }
        addressNew.street = mainView.streetField.text
        validateUpdateData()
    }
    
    func validateDataOuterNumber() {
        if mainView.outerNumberField.text == "" {
            mainView.outerNumberField.state = .error
            mainView.outerNumberField.helpText = "Campo obligatorio"
        } else {
            mainView.outerNumberField.helpText = ""
            mainView.outerNumberField.state = .none
        }
        addressNew.out_number = mainView.outerNumberField.text
        validateUpdateData()
    }
    
    func validateinteriorNumber() {
        addressNew.interior_number = mainView.interiorNumberField.text
        validateUpdateData()
    }
    
    
    func validateCPFocus() {
        if mainView.CPField.text == "" {
            mainView.CPField.state = .error
            mainView.CPField.helpText = "Campo obligatorio"
            mainView.dropDown.setupItem(.init(text: ""))
            mainView.dropDown.data = []
        } else {
            mainView.CPField.helpText = ""
            mainView.CPField.state = .none
        }
        
        addressNew.zip = mainView.CPField.text
        validateUpdateData()
    }
    
    func validateCP() {
        if mainView.CPField.text == "" {
            mainView.CPField.state = .error
            mainView.CPField.helpText = "Campo obligatorio"
            mainView.dropDown.setupItem(.init(text: ""))
            mainView.dropDown.data = []
        } else {
            mainView.CPField.helpText = ""
            mainView.CPField.state = .none
        }
        
        addressNew.zip = mainView.CPField.text
        
        if mainView.CPField.text.count == 5 {
            presenter?.consultCP(CP: mainView.CPField.text)
        } else {
            cpValido = false
        }
        
        validateUpdateData()
    }
    
    func validateUpdateData() {
        guard let data = privateData?.address else { return }
        
        if data.street == addressNew.street && data.out_number == addressNew.out_number &&
            data.interior_number == addressNew.interior_number && data.zip == addressNew.zip, data.colony?.description == addressNew.colony?.description {
            editAlert = false
            mainView.updateBtn.disabled = true
        } else if let street = addressNew.street, !street.isEmpty, let outNumber = addressNew.out_number, !outNumber.isEmpty, let zip = addressNew.zip, !zip.isEmpty, cpValido  {
            editAlert = true
            mainView.updateBtn.disabled = false
        } else {
            mainView.updateBtn.disabled = true
        }
        
    }
    
    @objc func actionButton(){
        if addressNew.street?.description != "" && addressNew.out_number != "" && addressNew.zip != "" && addressNew.colony?.description != "" && cpValido == true{
            let address = AddressRequest(id_collaborator: SessionInfo.shared.user?.zeusId ?? "",
                                         street: addressNew.street ?? "",
                                         out_number: addressNew.out_number ?? "",
                                         interior_number: addressNew.interior_number,
                                         colony: addressNew.colony?.description ?? "",
                                         zip: addressNew.zip ?? "",
                                         municipality: addressNew.municipality?.description ?? "",
                                         name_state: addressNew.state?.description ?? "",
                                         alias: "DIR1",
                                         id_address: privateData?.address?.id ?? 0,id_state:addressNew.state?.id ?? 0)
            presenter?.updateAdress(adress: address)
        }else{
            ZDSToastManager.shared.show(message: "Completa todos los campos requeridos para actualizar", style: .error, duration: 3)
        }
        
    }
}

extension MyPrivateDataViewController: MyPrivateDataViewProtocol {
    func CPInvalid() {
        mainView.CPField.state = .error
        mainView.CPField.helpText = "El código postal ingresado no es válido."
        cpValido = false
        mainView.dropDown.setupItem(.init(text: ""))
        mainView.dropDown.data = []
        validateUpdateData()
    }
    
    func resultUpdateAddress(address: AddressInformationResponse?) {
        if let result = address {
            privateData?.address?.street = result.street
            privateData?.address?.colony?.description = result.colony?.description
            privateData?.address?.municipality?.description = result.municipality?.description
            privateData?.address?.out_number = result.out_number
            privateData?.address?.zip = result.zip
            privateData?.address?.interior_number = result.interior_number
            privateData?.address?.state?.id = result.state?.id
            privateData?.address?.state?.description = addressNew.state?.description
            setData()
            ZDSToastManager.shared.show(message: "La dirección se actualizó correctamente", style: .success, duration: 3)
            mainView.updateBtn.disabled = true
            editAlert = false
        }else{
            ZDSToastManager.shared.show(message: "Ocurrió un error. Intenta nuevamente", style: .error, duration: 3)
        }
    }
    
    func setInformationCP(CPResponse: CPInformation, CP: String) {
        cpValido = true
        privateData?.address?.state?.description = CPResponse.stateName ?? ""
        addressNew.state?.description = CPResponse.stateName ?? ""
        mainView.stateField.text = CPResponse.stateName ?? ""
        addressNew.state?.id =  CPResponse.stateId ?? 0
        addressNew.municipality?.description = CPResponse.cityName ?? ""
        mainView.municipalityField.text = CPResponse.cityName ?? ""
        addressNew.zip = CP
        self.setColony(colonys: CPResponse.colonies)
    }
    
    func showLoading() {
        self.showDSLoader()
    }
    
    func removeLoading() {
        self.hideDSLoader()
    }
    
    func setPrivateData(data: PersonalInformation) {
        self.privateData = data
        self.setData()
    }
    
    func setInformationError() {
        ZDSToastManager.shared.show(message: "Ocurrió un error. Intenta nuevamente", style: .error, duration: 3)
    }
}

extension MyPrivateDataViewController:ZDSDropdownViewDelegate {
    func dropdownPresentedVC() -> UIViewController {
        return self
    }
    
    func dropdown(_ view: ZeusCoreDesignSystem.ZDSDropdownView, didSelect item: ZeusCoreDesignSystem.ZDSDropdownViewCell.Model) {
        mainView.dropDown.selectedItem = item
        addressNew.colony?.description = mainView.dropDown.selectedItem?.text ?? ""
        validateUpdateData()
    }
}
