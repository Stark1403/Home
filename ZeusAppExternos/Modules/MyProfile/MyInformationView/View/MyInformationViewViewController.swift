//
//  MyInformationViewViewController.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 11/21/24.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem
import ZeusSessionInfo

class MyInformationViewViewController: ZDSUDNViewController {
    var presenter: MyInformationViewPresenterProtocol?
    
    /// Views for this controller
    let mainView = MyInformationViewView()
    var numberSession = ""
    var numberValidation = ""
    var personalData = PersonalInformationRequest(correo: nil, fechaNacimiento: nil, lugarNacimiento: nil, unidadMedica: nil)
    var updatePersonalInfo = false
    var updateNumber = false
    var placeBirthId: GenericID?
    var editAlert = false
    
    override func viewDidLoad() {
        setName()
        super.viewDidLoad()
        view = mainView
        setupGestures()
        setupData()
        presenter?.getPrivateData()
        self.hideKeyboardWhenTappedAround()
        MyInformationEvents.shared.sendEvent(.screenView)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.prefersLargeTitles = true
    }
    
    override func backAction() {
        MyInformationEvents.shared.sendEvent(.back)
        if editAlert{
            goOutAlert()
        }else{
            navigationController?.popViewController(animated: true)
        }
    }
    
    private func setupGestures() {
        mainView.saveChangesBtn.onClick = {
            self.updateData()
        }
        
        mainView.contactPhoneTF.onChanged = { [weak self] text in
            self?.validateNumber()
        }
        
        mainView.mailTF.onChanged = { [weak self] text in
            guard let self = self else{return}
            if self.validateEmail(){
                mainView.mailTF.state = .none
                mainView.mailTF.helpText = nil
            }else{
                mainView.mailTF.state = .error
                mainView.mailTF.helpText = "Por favor ingresa un correo electrónico válido."
            }
            validateChangeBtn()
        }
        
        mainView.selectCalendar.selectTxt.onClick = {
            self.showCalendar()
        }
    }
    
    private func setName(){
        view.backgroundColor = .white
        headerColor = SessionInfo.shared.company?.primaryUIColor
        navigationBarColor = .white
        style = .statusAndNavBarStyle(.medium)
        backString = "Mi cuenta"
        titleString = "Mi información general"
    }
    private func setupData(){
        let myData = SessionInfo.shared
        mainView.fullNameTF.text = "\(myData.user?.name ?? "-") \(myData.user?.lastName ?? "-") \(myData.user?.secondLastName ?? "-")"
        numberSession = String((myData.user?.phoneNumber ?? "-").suffix(10))
        mainView.contactPhoneTF.text = numberSession
    }
    func goToVerification() {
        if validRetryTime() {
            numberValidation = mainView.contactPhoneTF.text
            presenter?.sendVerification(number: "+52"+numberValidation)
        }else{
            ZDSToastManager.shared.show(message: "¡Excediste el número de intentos! Inténtalo más tarde", style: .error, duration: 3)
        }
    }
    
    func updateData() {
        if updatePersonalInfo {
            presenter?.updateData(data: self.personalData)
        } else if updateNumber {
            goToVerification()
        }
    }
    
    func validRetryTime() -> Bool{
        if let savedDate = UserDefaults.standard.object(forKey: UserDefaultsKey.MyProfile.rawValue) as? Date {
            print("La fecha guardada es: \(savedDate)")// Calcular la diferencia en segundos
            let currentDate = Date()
            let elapsedTime = currentDate.timeIntervalSince(savedDate) // Tiempo en segundos
            
            if elapsedTime >= 3600 { // 3600 segundos = 1 hora
                print("Ya pasó una hora.")
                return true
            } else {
                let remainingTime = 3600 - elapsedTime
                print("Aún no ha pasado una hora. Faltan \(Int(remainingTime) / 60) minutos")
                return false
            }
        } else {
            print("No hay ninguna fecha guardada")
            return true
        }
        
    }
    
    func validateNumber(){
        let number = mainView.contactPhoneTF.text
        if number.count == 10 && number != numberSession {
            updateNumber = true
            mainView.saveChangesBtn.disabled = false
        }else{
            updateNumber = false
            validateChangeBtn()
        }
       
    }
    
    func validateEmail() -> Bool {
        let mail = mainView.mailTF.text
        if mail.isValidEmail || mail.isEmpty {
            personalData.correo = mail.isEmpty ? nil : mail
            return true && !mail.isEmpty
        }else{
            personalData.correo = nil
            return false
        }
    }
 
    func validateChangeBtn() {
        self.editAlert = true
        let number = mainView.contactPhoneTF.text
        
        if (personalData.fechaNacimiento != nil || personalData.lugarNacimiento != nil ||
            personalData.correo != nil) {
            updatePersonalInfo = true
        }else {
            updatePersonalInfo = false
        }
        
        if (updatePersonalInfo && number.count == 10) || (updatePersonalInfo && updateNumber){
            mainView.saveChangesBtn.disabled = false
        }else{
            mainView.saveChangesBtn.disabled = true
        }
       
    }
    
    @objc func showCalendar() {
        let vc = CalendarModalViewController()
        vc.titleLabel.text = "Fecha Nacimiento"
        vc.modalPresentationStyle = .overFullScreen
        vc.delegate = self
        present(vc, animated: true)
    }
    
    func cleanData() {
        self.personalData = PersonalInformationRequest(correo: "", fechaNacimiento: nil, lugarNacimiento: nil, unidadMedica: nil)
        updateNumber = false
        updatePersonalInfo = false
        mainView.saveChangesBtn.disabled = true
    }
    
    func ShowToast(message: String, type: ZeusCoreDesignSystem.ZDSToastStyle) {
        ZDSToastManager.shared.show(message: message, style: type, duration: 2)
    }
    
    func goOutAlert(){
        MyInformationEvents.shared.sendEvent(.screenAlert)
        var alert = ZDSAlert()
        
        alert.primaryColor = headerColor ?? .purple
        alert.title = "¿Está seguro de salir de edición?"
        alert.message = "Al realizar esta acción se perderá todo su progreso."
        alert.primaryTitle = "Sí, salir"
        alert.secondaryTitle = "Seguir editando"
        alert.style = .alert
        
        let view = alert.asUIKitViewController()
        view.modalPresentationStyle = .overCurrentContext
        view.modalTransitionStyle = .crossDissolve
        view.view.backgroundColor = .backgroundTransparency
        alert.onPrimaryAction = {
            MyInformationEvents.shared.sendEvent(.goOut)
            self.editAlert = false
            view.dismiss(animated: true)
            self.backAction()
        }
        alert.onSecundaryAction = {
            MyInformationEvents.shared.sendEvent(.keepEditing)
            view.dismiss(animated: true)
        }
        
        self.present(view, animated: true) {}
    }
}

extension MyInformationViewViewController: MyInformationViewViewProtocol {
    func responseUpdate() {
        if updateNumber {
            goToVerification()
        } else {
            self.hideLoader()
            ShowToast(message: "La información se actualizó correctamente.", type: .success)
            editAlert = false
            cleanData()
        }
    }
    
    func setPlacesBirth(catalog: [Catalogue]) {
        mainView.placeBirthView.data = catalog.map({ ZDSDropdownViewCell.Model(id: String($0.id ?? 0), text: $0.description ?? "")})
        let model = ZDSDropdownViewCell.Model(id: "\(self.placeBirthId?.id ?? 0)" ,text: self.placeBirthId?.description ?? "")
        mainView.placeBirthView.setupItem(model)
        mainView.placeBirthView.delegate = self
        editAlert = false
    }
    
    func setPrivateData(data: PersonalInformation) {
        mainView.positionTF.text = data.employment?.position ?? "-"
        mainView.workAreaTF.text = data.employment?.area ?? "-"
       // mainView.identifierTF.text = data.employment?.identifier ?? "-"
        mainView.identifierTF.text = data.employment?.idApp ?? "-"
        mainView.selectCalendar.selectTxt.text = data.privateDate?.birthdate ?? "-"
        
        var date = data.privateDate?.birthdate?.getDate()
        mainView.selectCalendar.selectTxt.text = date?.getStringDate(withFormat: "dd/MM/YYYY") ?? ""
        self.placeBirthId = GenericID(id: data.privateDate?.place_birth?.id, description: data.privateDate?.place_birth?.description)
        
        mainView.genderView.text = data.privateDate?.gender?.description ?? "-"
        mainView.mailTF.text = data.employment?.email ?? "-"
        mainView.maritalStatusView.text = data.privateDate?.marital_status?.description ?? "-"
        mainView.idBossTF.text = data.employment?.id_chief ?? "-"
        mainView.fullNameTF.text = "\(data.employment?.name ?? "-") \(data.employment?.paternal_surname ?? "-") \(data.employment?.maternal_surname ?? "-")"
        mainView.contactPhoneTF.text = String((data.employment?.cell_phone_number ?? "-").suffix(10))
    }
    
    func resultSendVerify(success: Bool) {
        if success{
            presenter?.goToVerification(number: "+52"+numberValidation, delegate: self)
        }else{
            ZDSToastManager.shared.show(message: "¡Excediste el número de intentos! Inténtalo más tarde", style: .error, duration: 3)
            UserDefaults.standard.set(Date(), forKey: UserDefaultsKey.MyProfile.rawValue)
        }
    }
    
    func failAlert(){
        ShowToast(message: "¡Ooops! Algo pasó.La acción no se pudo completar correctamente. Inténtalo de nuevo.", type: .error)
        
    }
    
    func showLoader(){
        showDSLoader()
    }
    
    func hideLoader(){
        hideDSLoader()
    }
}
extension MyInformationViewViewController: VerificationCodeDelegate{
    func codeSuccess(success: Bool) {
        numberSession = numberValidation
        SessionInfoQueries.shared.updateUser(zeusId: SessionInfo.shared.user?.zeusId ?? "", phone: numberSession)
        ShowToast(message: "Los contactos de emergencia se actualizaron con éxito", type: .success)
        cleanData()
    }
}

extension MyInformationViewViewController: ZDSDropdownViewDelegate {
    func dropdownPresentedVC() -> UIViewController {
        self
    }
    
    func dropdown(_ view: ZeusCoreDesignSystem.ZDSDropdownView, didSelect item: ZeusCoreDesignSystem.ZDSDropdownViewCell.Model) {
        mainView.placeBirthView.selectedItem = item
        personalData.lugarNacimiento = Int(item.id)
        validateChangeBtn()
    }
}

extension UIViewController {
    func hideKeyboardWhenTappedAround() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(UIViewController.dismissKeyboard))
        tap.cancelsTouchesInView = false
        view.addGestureRecognizer(tap)    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }
}


extension MyInformationViewViewController: CalendarModalViewProtocol {
    func calendarDidAcceptSelection(_ date: Date?) {
        guard let date = date else {return}
        let datesString = date.getStringDate(withFormat: "dd/MM/YYYY")
        mainView.selectCalendar.selectTxt.text = datesString
        personalData.fechaNacimiento = datesString
        validateChangeBtn()
    }
}
