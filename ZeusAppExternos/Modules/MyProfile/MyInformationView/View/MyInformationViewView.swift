//
//  MyInformationViewView.swift
//  ZeusAppExternos
//
//  Created Satori Tech 209 on 11/21/24.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem
import ZeusSessionInfo
import SwiftUI
import ZeusUtils

class MyInformationViewView: UIView {
    // MARK: Child views
    lazy var mainContainerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        return view
    }()
    
    lazy var mainScrollView: UIScrollView = {
        let sv = UIScrollView()
        sv.translatesAutoresizingMaskIntoConstraints = false
        sv.showsHorizontalScrollIndicator = false
        sv.showsVerticalScrollIndicator = false
        return sv
    }()
    
    lazy var fullNameTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Nombre"
        tf.allowedCharacters = .alphanumerics
        tf.disabled = true
        tf.allowedCharacters = CharacterSet.letters.union(.whitespaces)
        return tf
    }()
    
    lazy var fullNameView: UIView = {
        let tf = fullNameTF.asUIKitView()
        return tf
    }()
    
    lazy var positionTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Puesto"
        tf.allowedCharacters = CharacterSet.letters.union(.whitespaces)
        tf.disabled = true
        return tf
    }()
    
    lazy var positionView: UIView = {
        let tf = positionTF.asUIKitView()
        return tf
    }()
    
    lazy var workAreaTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Área"
        tf.allowedCharacters = CharacterSet.letters.union(.whitespaces)
        tf.disabled = true
        return tf
    }()
    
    lazy var workAreaView: UIView = {
        let tf = workAreaTF.asUIKitView()
        return tf
    }()
    
    lazy var identifierTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Identificador"
        tf.disabled = true
        return tf
    }()
    
    lazy var identifierView: UIView = {
        let tf = identifierTF.asUIKitView()
        return tf
    }()
        
    
    lazy var idBossTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "ID jefe"
        tf.disabled = true
        return tf
    }()
    
    lazy var idBossView: UIView = {
        let tf = idBossTF.asUIKitView()
        return tf
    }()
    
    lazy var contactPhoneTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "No. Teléfono"
        tf.keyboardType = .numberPad
        tf.maxWidth = 10
        return tf
    }()
    

    lazy var maritalStatusView: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Estado civil"
        tf.disabled = true
        return tf
    }()
    
    lazy var genderView: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Género legal"
        tf.disabled = true
        return tf
    }()
    
    lazy var contactPhoneView: UIView = {
        return contactPhoneTF.asUIKitView()
    }()
    
    lazy var selectCalendar: SelectCalendarView = {
        var view = SelectCalendarView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var placeBirthView: ZDSDropdownView = {
        let dropdown = ZDSDropdownView()
        dropdown.hint = "Lugar de nacimiento"
        dropdown.anchor = .bottom
        return dropdown
    }()
    
    lazy var mailTF: ZDSTextField = {
        var tf = ZDSTextField()
        tf.title = "Correo electrónico"
        return tf
    }()
    
    lazy var mailView: UIView = {
        let tf = mailTF.asUIKitView()
        return tf
    }()
    
    lazy var contactPhoneContainerView: UIStackView = {
        let sv = UIStackView()
        sv.axis = .horizontal
        sv.spacing = 10
        let indicatorView = NumberIndicatorView()
        indicatorView.setupConstraints(shouldShrinkView: false)
        [indicatorView, contactPhoneView].forEach{ sv.addArrangedSubview($0) }
        indicatorView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            indicatorView.widthAnchor.constraint(equalToConstant: 80),
        ])
        return sv
    }()

    lazy var saveChangesBtn: ZDSButton = {
        var btn = ZDSButton()
        btn.style = .primary
        btn.setTitle("Guardar cambios", for: .normal)
        btn.primaryColor = SessionInfo.shared.company?.primaryUIColor ?? .purple
        btn.disabled = true
        return btn
    }()
    
    lazy var saveChangesView: UIView = {
        let btn = saveChangesBtn.asUIKitView()
        return btn
    }()
    
    lazy var saveChangesContainer: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        
        return view
    }()
    
    lazy var inputsStackView: UIStackView = {
        let sv = UIStackView()
        sv.translatesAutoresizingMaskIntoConstraints = false
        sv.axis = .vertical
        sv.spacing = 20
        sv.distribution = .fill
        sv.addArrangedSubview(fullNameView)
        sv.addArrangedSubview(positionView)
        sv.addArrangedSubview(workAreaView)
        sv.addArrangedSubview(identifierView)
        sv.addArrangedSubview(selectCalendar)
        sv.addArrangedSubview(placeBirthView)
        sv.addArrangedSubview(mailView)
        sv.addArrangedSubview(contactPhoneContainerView)
        sv.addArrangedSubview(genderView.asUIKitView())
        sv.addArrangedSubview(contactPhoneContainerView)
        sv.addArrangedSubview(maritalStatusView.asUIKitView())
        sv.addArrangedSubview(idBossView)
        sv.addArrangedSubview(saveChangesContainer)
        NSLayoutConstraint.activate([
            saveChangesContainer.heightAnchor.constraint(equalToConstant: 16)
        ])
        return sv
    }()
    
    // MARK: Initializers
    init() {
        super.init(frame: .zero)
        addViews()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
