//
//  ZMTSubModulesViewController.swift
//  ZeusAppExternos
//
//  Created Pedro Ivan Soriano Flores on 13/01/25.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusCoreDesignSystem
import ZeusCoreInterceptor
import ZeusSessionInfo


class ZMTSubModulesViewController: ZDSUDNViewController {
    var presenter: ZMTSubModulesPresenterProtocol?
    
    /// Views for this controller
    let mainView = ZMTSubModulesView()
    
    var permissions: [PermissionMenuModel]? {
        didSet{ setupPermissions() }
    }
    var titleMenu: String?
    
    override func viewDidLoad() {
        headerColor = SessionInfo.shared.company?.primaryUIColor
        navigationBarColor = headerColor
        view.backgroundColor = .white
        super.viewDidLoad()
        navigationController?.setNavigationBarHidden(false, animated: false)
        view = mainView
        mainView.delegate = self
    }
    
    
    private func setupPermissions(){
        guard let permission = permissions else { return }
        mainView.items = permission.map { ($0.name ?? "", "child-\($0.idPermission)") }
        setupStackView()
    }
    
    private func setupStackView() {
        for (index, item) in mainView.items.enumerated() {
            let itemView = mainView.createItemView(title: item.0, iconName: item.1, tag: index)
            mainView.stackView.addArrangedSubview(itemView)
        }
    }

}

extension ZMTSubModulesViewController: ZMTSubModulesViewProtocol {
    func showLoader() {
        self.showDSLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: { [weak self] in
            self?.hideDSLoader()
        })
    }
}

extension ZMTSubModulesViewController: ZMTSubModulesViewDelegate{
    func goToChildPermission(item: (String, String)) {
        if item.1 == "child-16" {
            ZCInterceptor.shared.startFlow(forAction: ZCIExternalZeusKeys.myTalent, navigateDelegate: self)
        }
    }
}

extension ZMTSubModulesViewController: ZCInterceptorDelegate{
    func didFailToEnterFlow(error: NSError) {
        
    }
}

