//
//  ZMTSubModulesView.swift
//  ZeusAppExternos
//
//  Created Pedro Ivan Soriano Flores on 13/01/25.
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusSessionInfo

protocol ZMTSubModulesViewDelegate: AnyObject {
    func goToChildPermission(item: (String, String))
}

class ZMTSubModulesView: UIView {
    // MARK: Child views
    
    weak var delegate: ZMTSubModulesViewDelegate?
    
    lazy var stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.spacing = 12
        stackView.alignment = .fill
        stackView.distribution = .equalSpacing
        stackView.translatesAutoresizingMaskIntoConstraints = false
        return stackView
    }()
    
    var items = [("", "")]
    
    // MARK: Initializers
    init() {
        super.init(frame: .zero)
        backgroundColor = .white
        addViews()
        setupConstraints()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func createItemView(title: String, iconName: String, tag: Int) -> UIView {
        let itemView = UIView()
        itemView.backgroundColor = UIColor(white: 0.95, alpha: 1)
        itemView.layer.cornerRadius = 8
        itemView.tag = tag
        itemView.layer.masksToBounds = true
        itemView.translatesAutoresizingMaskIntoConstraints = false

        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(itemTapped(_:)))
        itemView.addGestureRecognizer(tapGesture)
        
        let plecaView = UIView()
        plecaView.backgroundColor = SessionInfo.shared.company?.primaryUIColor
        plecaView.translatesAutoresizingMaskIntoConstraints = false
        plecaView.layer.cornerRadius = 3
        plecaView.layer.masksToBounds = true
        
        let iconImageView = UIImageView(image: UIImage(named: iconName))
        iconImageView.tintColor = .purple
        iconImageView.contentMode = .scaleAspectFit
        iconImageView.translatesAutoresizingMaskIntoConstraints = false
        
        let titleLabel = UILabel()
        titleLabel.text = title
        titleLabel.font = UIFont.systemFont(ofSize: 14, weight: .regular)
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        let arrowImageView = UIImageView(image: UIImage(systemName: "chevron.right"))
        arrowImageView.tintColor = .black
        arrowImageView.contentMode = .scaleAspectFit
        arrowImageView.translatesAutoresizingMaskIntoConstraints = false
        
        itemView.addSubview(plecaView)
        itemView.addSubview(iconImageView)
        itemView.addSubview(titleLabel)
        itemView.addSubview(arrowImageView)
        
        NSLayoutConstraint.activate([
            plecaView.leadingAnchor.constraint(equalTo: itemView.leadingAnchor),
            plecaView.topAnchor.constraint(equalTo: itemView.topAnchor, constant: 0),
            plecaView.bottomAnchor.constraint(equalTo: itemView.bottomAnchor, constant: 0),
            plecaView.widthAnchor.constraint(equalToConstant: 5),
            
            iconImageView.leadingAnchor.constraint(equalTo: itemView.leadingAnchor, constant: 12),
            iconImageView.centerYAnchor.constraint(equalTo: itemView.centerYAnchor),
            iconImageView.widthAnchor.constraint(equalToConstant: 24),
            iconImageView.heightAnchor.constraint(equalToConstant: 24),
            
            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 12),
            titleLabel.centerYAnchor.constraint(equalTo: itemView.centerYAnchor),
            
            arrowImageView.trailingAnchor.constraint(equalTo: itemView.trailingAnchor, constant: -12),
            arrowImageView.centerYAnchor.constraint(equalTo: itemView.centerYAnchor),
            arrowImageView.widthAnchor.constraint(equalToConstant: 16),
            arrowImageView.heightAnchor.constraint(equalToConstant: 16),
            
            itemView.heightAnchor.constraint(equalToConstant: 60)
        ])
        
        return itemView
    }
    
    @objc
    func itemTapped(_ sender: UITapGestureRecognizer) {
        if let view = sender.view {
            let item = items[view.tag]
            delegate?.goToChildPermission(item: item)
        }
    }
}
