//
//  AddGuestPhotoViewController.swift
//  ZeusAppExternos
//
//  Created Alejandro Rivera on 21/08/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusUtils
import ZeusSessionInfo
import MobileCoreServices
import PhotosUI

protocol AddGuestPhotoViewControllerDelegate {
    func didSaveImage(_ image: UIImage?)
}

class AddGuestPhotoViewController: ZUUDNViewController, AddGuestPhotoViewProtocol {
    
	var presenter: AddGuestPhotoPresenterProtocol?
    var previousImage: UIImage?
    var delegate: AddGuestPhotoViewControllerDelegate?
    
    var saveButton: ZUGenericButton = {
        let button = ZUGenericButton(udnSkin: UDNSkin.global, type: .inactive)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("Guardar", for: .normal)
        button.titleLabel?.font = .header6
        return button
    }()
    
    let viewImageContainer: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .clear
        view.clipsToBounds = false
        view.layer.borderColor = UIColor.zeusPrimaryDefault?.cgColor
        view.layer.borderWidth = 3
        return view
    }()
    
    var acronymLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = "I"
        label.font = UIFont(name: "Poppins-Semibold", size: 48)
        label.textColor = .zeusPrimaryDefault
        label.textAlignment = .center
        return label
    }()
    
    lazy var profileImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.backgroundColor = UIColor.zeusPrimaryDefault?.withAlphaComponent(0.15)
        imageView.clipsToBounds = true
        imageView.contentMode = .scaleAspectFill
        imageView.image = self.previousImage
        return imageView
    }()
    
    var cameraButton: UIButton = {
        let button = UIButton()
        button.translatesAutoresizingMaskIntoConstraints = false
        button.backgroundColor = .white
        button.setImage(UIImage(named: "ic_clipboard-list"), for: .normal)
        button.layer.cornerRadius = 30
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOpacity = 0.08
        button.layer.shadowRadius = 3//shadow(color: .black.opacity(0.08), radius: 3, x: 0, y: 0)
        return button
    }()
    
    override func loadView() {
        titleString = "Foto de perfil"
        super.loadView()
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupButtons()
        setImage(previousImage)
    }
    
    func setupView() {
        view.backgroundColor = .white
        navigationController?.setNavigationBarHidden(false, animated: true)
        udnColor = UIColor.zeusPrimaryDefault
        
        view.addSubview(viewImageContainer)
        viewImageContainer.addSubview(profileImageView)
        profileImageView.addSubview(acronymLabel)
        
        view.addSubview(cameraButton)
        view.addSubview(saveButton)
        
        profileImageView.layer.cornerRadius = view.bounds.width / 4
        viewImageContainer.layer.cornerRadius = ((view.bounds.width / 2) + 30) / 2
        
        NSLayoutConstraint.activate([
            viewImageContainer.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            viewImageContainer.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 45),
            viewImageContainer.widthAnchor.constraint(equalToConstant: (view.bounds.width / 2) + 30),
            viewImageContainer.heightAnchor.constraint(equalTo: viewImageContainer.widthAnchor, multiplier: 1),
            
            profileImageView.centerYAnchor.constraint(equalTo: viewImageContainer.centerYAnchor),
            profileImageView.centerXAnchor.constraint(equalTo: viewImageContainer.centerXAnchor),
            profileImageView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5),
            profileImageView.heightAnchor.constraint(equalTo: profileImageView.widthAnchor, multiplier: 1),
            
            acronymLabel.centerXAnchor.constraint(equalTo: profileImageView.centerXAnchor),
            acronymLabel.centerYAnchor.constraint(equalTo: profileImageView.centerYAnchor),
            
            saveButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 15),
            saveButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            saveButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -15),
            saveButton.heightAnchor.constraint(equalToConstant: 44),
            
            cameraButton.centerYAnchor.constraint(equalTo: profileImageView.centerYAnchor, constant: view.bounds.width/4 + 18),
            cameraButton.centerXAnchor.constraint(equalTo: profileImageView.centerXAnchor),
            cameraButton.widthAnchor.constraint(equalToConstant: 60),
            cameraButton.heightAnchor.constraint(equalTo: cameraButton.widthAnchor, multiplier: 1)
        ])
    }
    
    func setupButtons() {
        cameraButton.addTarget(self, action: #selector(openChangePhotoModal), for: .touchUpInside)
        saveButton.addTarget(self, action: #selector(saveChange), for: .touchUpInside)
    }
    
    func setImage(_ image: UIImage?) {
        DispatchQueue.main.async {
            if let image = image {
                self.acronymLabel.isHidden = true
                self.profileImageView.image = image
                self.previousImage = image
                self.saveButton.type = .normal
            } else {
                self.acronymLabel.isHidden = false
            }
        }
    }
    
    @objc func openChangePhotoModal() {
        let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        let cameraAction = UIAlertAction(title: "Tomar una foto", style: .default) { [weak self] _ in
            guard let self = self else { return }
            actionSheet.dismiss(animated: true)
            self.openAttach(option: .camera)
        }
        let galleryAction = UIAlertAction(title: "Elegir de la galería", style: .default) { [weak self] _ in
            guard let self = self else { return }
            actionSheet.dismiss(animated: true)
            self.openAttach(option: .gallery)
        }
        let cancel = UIAlertAction(title: "Cancelar", style: .cancel) { _ in
            actionSheet.dismiss(animated: true)
        }
        actionSheet.addAction(cameraAction)
        actionSheet.addAction(galleryAction)
        actionSheet.addAction(cancel)
        
        navigationController?.present(actionSheet, animated: true)
    }
    
    fileprivate func openAttach(option: MultimediaOption) {
        switch option {
        case .camera:
            let vc = UIImagePickerController.setupWithReference(delegate: self)
            navigationController?.present(vc, animated: true, completion: nil)
            break
        case .gallery :
            pickPhoto(limit: 1, delegate: self)
            break
        }
    }
    
    @objc func saveChange() {
        delegate?.didSaveImage(self.previousImage)
        backAction()
    }
}

extension AddGuestPhotoViewController: PHPickerViewControllerDelegate {
    func pickPhoto(limit : Int , delegate : PHPickerViewControllerDelegate) {
        do {
            var config = PHPickerConfiguration()
            config = PHPickerConfiguration(photoLibrary: PHPhotoLibrary.shared())
            config.selectionLimit = limit
            config.filter = .any(of: [.images , .livePhotos])
            config.preferredAssetRepresentationMode = .current
            let picker = PHPickerViewController(configuration: config)
            picker.delegate = delegate
            self.navigationController?.present(picker, animated: true)
        }
    }
    
    func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
        guard results.first != nil else {
            picker.dismiss(animated: true, completion: nil)
            return
        }
        
        picker.dismiss(animated: true) {
            let prov = results.first!.itemProvider
            
            prov.loadObject(ofClass: UIImage.self) { im, err in
                if let image = im as? UIImage {
                    self.setImage(image)
                }
            }
        }
    }
}

extension AddGuestPhotoViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true)

        guard let image = info[.editedImage] as? UIImage else { return }

        self.setImage(image)
    }
}

fileprivate enum MultimediaOption {
    case camera
    case gallery
}

extension UIImagePickerController {
    static func setupWithReference(delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate)) -> UIImagePickerController {
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = delegate
        imagePicker.sourceType = .camera
        imagePicker.mediaTypes = [kUTTypeImage as String]
        imagePicker.allowsEditing = true
        return imagePicker
    }
}
