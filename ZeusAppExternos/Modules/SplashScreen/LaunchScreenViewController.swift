//
//  LaunchScreenViewController.swift
//  zeus-ios-sdk-externos-login
//
//  Created Carolina Carapia Ruiz on 27/2/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by UPAX Zeus
//

import UIKit
import ZeusSessionInfo
import ZeusCoreDesignSystem
import Lottie
import ZeusCoreInterceptor
import UPAXCommons

class LaunchScreenViewController: ZDSUDNViewController {
    
    lazy var backgroundImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.alpha = 0.5
        imageView.image = UIImage(named: "splash.background")
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.isHidden = true
        return imageView
    }()
    lazy var topImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "splash.plecaheader")
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.isHidden = true
        return imageView
    }()
    lazy var bottomImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "splash.plecafooter")
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.isHidden = true
        return imageView
    }()
    
    lazy var ellipseLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.isHidden = true
        label.layer.cornerRadius = 121
        return label
    }()
    
    lazy var splasEllipseImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "splash.ellipse")
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.isHidden = true
        return imageView
    }()
    
    lazy var logoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "splash.logo")
        imageView.contentMode = .scaleAspectFill
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.isHidden = true
        return imageView
    }()
    
    lazy var newLogoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "splashNewLogo", in: Bundle.local, compatibleWith: nil)
        imageView.contentMode = .scaleAspectFit
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    lazy var viewAnimationStart: LottieAnimationView = {
        var viewAnimation = LottieAnimationView()
        viewAnimation = .init(name: "frame2",bundle:
                                Bundle.init(for: LaunchScreenViewController.self))
        viewAnimation.loopMode = .playOnce
        viewAnimation.animationSpeed = 2
        viewAnimation.contentMode = .scaleAspectFill
        viewAnimation.backgroundBehavior = .pauseAndRestore
        viewAnimation.translatesAutoresizingMaskIntoConstraints = false
        viewAnimation.backgroundColor = .clear
        return viewAnimation
    }()
    
    lazy var viewAnimationEnd: LottieAnimationView = {
        var viewAnimation = LottieAnimationView()
        viewAnimation = .init(name: "frame1",bundle:
                                Bundle.init(for: LaunchScreenViewController.self))
        viewAnimation.loopMode = .playOnce
        viewAnimation.animationSpeed = 3
        viewAnimation.contentMode = .scaleAspectFill
        viewAnimation.backgroundBehavior = .pauseAndRestore
        viewAnimation.translatesAutoresizingMaskIntoConstraints = false
        viewAnimation.backgroundColor = .clear
        viewAnimation.isHidden = true
        return viewAnimation
    }()
    
    var loginSuccess: Bool = false
    var loginGuest: Bool = false

    //MARK: Lifecycle
    override func viewDidLoad() {
        headerColor = .clear
        super.viewDidLoad()
        addViews()
        addConstraint()
        RegisterActions.registerActions()
        view.backgroundColor = .white
        navigationController?.navigationBar.isHidden = true
        SessionManager.shared.addListener()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if !(UIDevice.current.isJailbroken || UIDevice.current.isFridaDetected) {
            initAnimation()
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        if UIDevice.current.isJailbroken || UIDevice.current.isFridaDetected {
            showJailbreakAlert()
            DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                fatalError()
            }
        }
    }
    
    private func showJailbreakAlert() {
        let alert = UIAlertController(
            title: "Información",
            message: "Por seguridad la aplicación se cerrará, detectamos que cuentas con aplicaciones que no provienen de App Store", preferredStyle: .alert
        )
            
        present(alert, animated: true, completion: nil)
    }
    
    func addViews(){
        view.addSubview(backgroundImageView)
        view.addSubview(topImageView)
        view.addSubview(bottomImageView)
        view.addSubview(ellipseLabel)
        view.addSubview(logoImageView)
        view.addSubview(splasEllipseImageView)
        view.addSubview(newLogoImageView)
        view.addSubview(viewAnimationStart)
        view.addSubview(viewAnimationEnd)
    }
    
    func addConstraint(){
        NSLayoutConstraint.activate([
            backgroundImageView.topAnchor.constraint(equalTo: view.topAnchor, constant: 0),
            backgroundImageView.leadingAnchor.constraint(equalTo:view.leadingAnchor, constant: 0),
            backgroundImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            backgroundImageView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0),
            
            topImageView.heightAnchor.constraint(equalToConstant: 157),
            topImageView.topAnchor.constraint(equalTo: view.topAnchor, constant: 0),
            topImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            topImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            
            bottomImageView.heightAnchor.constraint(equalToConstant: 143),
            bottomImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            bottomImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            bottomImageView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0),

            ellipseLabel.heightAnchor.constraint(equalToConstant: 243),
            ellipseLabel.widthAnchor.constraint(equalToConstant: 243),
            ellipseLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            ellipseLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            
            logoImageView.heightAnchor.constraint(equalToConstant: 67),
            logoImageView.widthAnchor.constraint(equalToConstant: 278),
            logoImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            logoImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            
            newLogoImageView.heightAnchor.constraint(equalToConstant: 278),
            newLogoImageView.widthAnchor.constraint(equalToConstant: 278),
            newLogoImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            newLogoImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            
            splasEllipseImageView.heightAnchor.constraint(equalToConstant: 23),
            splasEllipseImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            splasEllipseImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 20),
            splasEllipseImageView.topAnchor.constraint(equalTo: logoImageView.bottomAnchor, constant: 19),
            
            viewAnimationEnd.topAnchor.constraint(equalTo: view.topAnchor, constant: 0),
            viewAnimationEnd.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            viewAnimationEnd.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            viewAnimationEnd.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0),
            
            
            viewAnimationStart.topAnchor.constraint(equalTo: view.topAnchor),
            viewAnimationStart.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            viewAnimationStart.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            viewAnimationStart.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])
    }
    
    //MARK: - Private methods
    private func initAnimation() {
        splasEllipseImageView.isHidden = true
        viewAnimationStart.play { [weak self] _ in
            self?.viewAnimationEnd.isHidden = false
            self?.viewAnimationStart.isHidden = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.viewAnimationEnd.play { [weak self] _ in
                    self?.open()
                }
             }
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("openLoginNormal"), object: nil, queue: nil) { [weak self] _ in
            self?.openNormal()
        }
    }
    
    func openNormal() {
        if SessionInfo.shared.isSessionActive {
            self.openDashboard()
            return
        }
        
        let appDelegate: AppDelegate? = UIApplication.shared.delegate as? AppDelegate
        appDelegate?.isFinishLaunching = true
        ZCInterceptor.shared.startFlow(forAction: ZCIExternalZeusKeys.login, navigateDelegate: self)
    }
    
    func open() {
        if SessionInfo.shared.isSessionActive {
            self.openDashboard()
            return
        }
        
        if BiometricAuthManager.shared.isSatisfyAllRequirements() {
            let appDelegate: AppDelegate? = UIApplication.shared.delegate as? AppDelegate
            appDelegate?.isFinishLaunching = true
            ZCInterceptor.shared.startFlow(forAction: ZCIExternalZeusKeys.loginBiometric, navigateDelegate: self)
        } else {
            let appDelegate: AppDelegate? = UIApplication.shared.delegate as? AppDelegate
            appDelegate?.isFinishLaunching = true
            ZCInterceptor.shared.startFlow(forAction: ZCIExternalZeusKeys.login, navigateDelegate: self)
        }
    }
        
    func openDashboard() {
        SessionManager.openDashboard()
    }
    
    func openGuestDashboard() {
        SessionManager.openGuestDashboard()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
}

extension LaunchScreenViewController: ZCInterceptorDelegate {
    func didFailToEnterFlow(error: NSError) {
        let dialogMessage = UIAlertController(title: error.userInfo["value"] as? String, message: error.userInfo["description"] as? String, preferredStyle: .alert)
        let ok = UIAlertAction(title: "OK", style: .default, handler: { (action) -> Void in
            
        })
        dialogMessage.addAction(ok)
        self.present(dialogMessage, animated: true, completion: nil)
    }
    
    func willFinishFlow(withInfo info: [String : Any]?) {
        if let loginSuccess = info?["loginSuccess"] as? Bool, loginSuccess{
            self.loginSuccess = true
        }
        if let loginGuest = info?["loginGuest"] as? Bool, loginGuest {
            self.loginGuest = true
        }
    }
    
    func didFinishFlow() {
        if loginSuccess {
            loginGuest ? openGuestDashboard() : openDashboard()
        }
    }
}

