//
//  HomeViewControllerInteractor.swift
//  ZeusAppExternos
//
//  Created Alexander Betanzos Lopez on 30/03/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import ZeusCoreInterceptor
import ZeusTermsConditions
import ZeusSessionInfo
import UPAXNetworking
import ZeusKeyManager

class HomeViewControllerInteractor: HomeViewControllerInteractorProtocol {
    
    weak var presenter: HomeViewControllerPresenterProtocol?
    
    private let networking = ZeusV2NetworkManager.shared.networking
    
    var isUniqueSessionAlreadyValidated = false
    
    func getPermissionsService(zeusId: String) {
        
        PermissionManager.shared.getMenu(zeusId: zeusId) { permissions in
            
            let menuFrameworks = permissions.filter { item in
                self.presenter?.removeLoader()
                return item.typeMenu == 1
            }
            let menuSlides = permissions.filter { item in
                self.presenter?.removeLoader()
                return item.typeMenu == 4
            }
            
            guard let menuFramework = menuFrameworks.first?.list else {
                self.presenter?.removeLoader()
                return
            }
            guard let menuSlide = menuSlides.first?.list else {
                self.presenter?.removeLoader()
                return
            }
            
            let menu = menuFramework.sorted { $0.order < $1.order }
            menuSlideTemp = menuSlide
            self.presenter?.setMenu(menuFrameworks: menu, menuSlide: menuSlide)
        }
    }
    
    
    func getMenuForSession() {
        
        let permissions = PermissionManager.shared.getMenuFromSession()
        
        let menuFrameworks = permissions.filter { item in
            self.presenter?.removeLoader()
            return item.typeMenu == 1
        }
        let menuSlides = permissions.filter { item in
            self.presenter?.removeLoader()
            return item.typeMenu == 4
        }
        
        guard let menuFramework = menuFrameworks.first?.list else {
            self.presenter?.removeLoader()
            return
        }
        guard let menuSlide = menuSlides.first?.list else {
            self.presenter?.removeLoader()
            return
        }
        
        let menu = menuFramework.sorted { $0.order < $1.order }
        menuSlideTemp = menuSlide
        self.presenter?.setMenu(menuFrameworks: menu, menuSlide: menuSlide)
        
    }
    
    func validateUniqueSession() {
        Task {
            guard let state = try? await SingleSessionValidator.shared.validate() else { return }
            switch state {
                case .otherActive:
                    DispatchQueue.main.async { [weak self] in
                        guard let self = self else { return }
                        self.presenter?.showUniqueSessionAlert()
                    }
                case .newSession, .multisession:
                VersionValidator.checkAppVersion()
                    break
            }
        }
    }
    
    func validateSession() {
        CompanyStatusValidator.shared.activateValidator(companyID: "\(SessionInfo.shared.company?.companyId ?? 0)") { [weak self] isActive in
            guard self?.isUniqueSessionAlreadyValidated == false,
                  isActive else { return }
            self?.isUniqueSessionAlreadyValidated = true
            self?.validateUniqueSession()
        }
    }
    
    func confirmUniqueSession() {
        SingleSessionValidator.shared.confirmCurrentDeviceRegistration()
    }
  
    func confirmNotDisableUser() {
      SingleSessionValidator.shared.confirmNotDisableUser()
    }
    
    func setupLegalDocuments() {
        guard let zeusId = SessionInfo.shared.user?.zeusId else { return }
        TermsAndPrivacyFirebaseManager(zeusId: zeusId).listenerUpdate { legalOptions in
            guard let update = legalOptions else { return }
            guard ZCInterceptor.shared.currentFlow != ZCIExternalZeusKeys.alertPrivacyTerms.rawValue else {
                return
            }
            self.presenter?.showLegalRequest(update: update)
        }
    }
    
    func getAnnouncements() {
        guard let zeusId = SessionInfo.shared.user?.zeusId else { return }
        let url = TalentoZeusConfiguration.baseURL.absoluteString + "/v2/comunicados/colaboradores/{idColaborador}/comunicados/destacados"
        let pathParams = AnnouncementRequestPath(idColaborador: zeusId)
        
        self.networking.call(url: url,
                             method: .get,
                             pathParams: pathParams) { (_ result: Swift.Result<CarrouselResponse, NetError>) in

            switch result {
            case .success(let response):
                self.presenter?.setAnnouncements(announcements: response.announcements ?? [])
                break
            case .failure(let error):
                self.presenter?.setAnnouncements(announcements: [])
                break
            }
        }
    }
}


