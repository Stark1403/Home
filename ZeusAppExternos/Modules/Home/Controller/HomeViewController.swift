//
//  HomeViewControllerViewController.swift
//  ZeusAppExternos
//
//  Created Alexander Betanzos Lopez on 30/03/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import ZeusExternosLogin
import ZeusUtils
import ZeusSessionInfo
import ZeusServiceCoordinator
import ZeusChat
import ZeusAttendanceControl
import ZeusIntercomExterno
import Kingfisher
import ZeusCoreDesignSystem
import SwiftUI
import ZeusCoreInterceptor
import ZeusSocialNetwork

protocol HomeViewControllerPermission {
    func updateData()
}

class HomeViewController: ZDSUDNViewController, PromoViewDelegate {
    
    var presenter: HomeViewControllerPresenterProtocol?
    let views: HomeViewControllerViews = HomeViewControllerViews()
    
    var menuFrameworks: [PermissionMenuModel] = []
    var menuSlide: [PermissionMenuModel] = []
    var notifications: [BadgeNotifications] = [BadgeNotifications]()
    var imageProfile = SessionInfo.shared.photoLocal
    
    var delegate: HomeViewControllerDelegate?
    
    lazy var menuCollectionView: UICollectionView = {
        let collection = UICollectionView(frame: self.view.frame, collectionViewLayout: UICollectionViewFlowLayout())
        collection.translatesAutoresizingMaskIntoConstraints = false
        collection.isHidden = true
        return collection
    }()
    
    lazy var communicatesCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    var announcementsView = PromoView()
    
    /*lazy var circularAssistanceButton: CircularButton = {
        let button = CircularButton(frame: CGRect(x: 0, y: 0, width: screenFrame.height * 0.07, height: screenFrame.height * 0.07), iconName: "pace")
        button.translatesAutoresizingMaskIntoConstraints = false
        button.backgroundColor = UDNSkin.global.color.lightColor
        button.onClick = {
            //self.logicForAssistance()
        }
        return button
    }()*/
    
    lazy var circularQRButton: CircularButton = {
        let button = CircularButton(frame: CGRect(x: 0, y: 0, width: screenFrame.height * 0.07, height: screenFrame.height * 0.07), iconName: "gafete")
        button.translatesAutoresizingMaskIntoConstraints = false
        button.backgroundColor = SessionInfo.shared.company?.primaryUIColor.lightColor //UDNSkin.global.color.lightColor
        button.onClick = {
            HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .tapGafeteButton, action: .click)
            GafeteViewController.present(from: self, firstName: SessionInfo.shared.user?.name ?? "", lastName: "\(SessionInfo.shared.user?.lastName ?? "") \(SessionInfo.shared.user?.secondLastName ?? "")")
        }
        return button
    }()
    
    lazy var swipeDownContainer: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isUserInteractionEnabled = true
        return view
    }()
    
    lazy var modulesSectionContainer: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        view.addSubview(myFavoritesView)
        view.addSubview(mostUsedAppsView)
        return view
    }()
    
    lazy var myFavoritesView: MyFavoritesView = {
        let view = MyFavoritesView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isHidden = false
        return view
    }()
    
    lazy var mostUsedAppsView: MostUsedView = {
        let view = MostUsedView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .white
        view.isHidden = false
        return view
    }()
    
    var permissionsViewModel = [PermissionsViewModel]()
    var shouldOpenModules: Bool = false
    var pointOrigin: CGPoint?
    var isRefreshView: Bool = false
    let activityIndicator = UIActivityIndicatorView(style: .large)
    var waveView: NewHomeWaveView?
    var timerAnnouncement: Timer?
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter?.confirmNotDisableUser()
        self.headerColor = SessionInfo.shared.company?.primaryUIColor
        navigationController?.navigationBar.isHidden = false
    }
    
    override func viewDidLoad() {
        if !UserDefaultsManager.getIsFirstUserLoad(for: SessionInfo.shared.user?.zeusId ?? "") {
            showDSLoader(style: .translucent, message: ZDSLoaderMessage(message: "¡Arrancamos!", font: .display1(isItalic: false)))
            UserDefaultsManager.setIsFirstUserLoad(for: SessionInfo.shared.user?.zeusId ?? "", value: true)
        } else {
            showDSLoader()
        }
        headerColor = SessionInfo.shared.company?.primaryUIColor
        super.viewDidLoad()
        view.backgroundColor = .white
        
        itemsInHeader = 2
        setupUI()
        setupShimmer()
        setupFavoritesNModules()
        
        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(panGestureRecognizerAction))
        swipeDownContainer.addGestureRecognizer(panGesture)
        getPermissions()
        RegisterActions.registerActions()
        let user = SessionInfo.shared.user
        NetworkConfig.zeusUserId = user?.zeusId
        presenter?.getPermissions(zeusId: user?.zeusId ?? "")
        UDNSkin.global = .init(color: SessionInfo.shared.company?.primaryUIColor,
                               logo: SessionInfo.shared.company?.logo,
                               miniLogo: nil)
        getNotifications()
        setObserverNotifications()
        setupLegalDocuments()
        ChatZeusSDK.startSocketConnection(with: user?.zeusId ?? "")
        AttendanceOpenClass.shared.syncAttendances()
        AttendanceControlManager.shared.delegate = self
        addObservers()
        guard ZWSConnectionChecker.networkIsAvailable() else {
            alertInternet()
            return
        }
        NotificationCenter.default.addObserver(self, selector: #selector(handleSwitchValueChanged(_:)), name: .goToNewFLow, object: nil)
        setupFavoritesNModules()
        setupShimmer()
        swipeDownContainer.addGestureRecognizer(panGesture)
        
        if hasAnnouncements {
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                self.startTimerAnnouncement()
            }
            
            announcementsView.promoDelegate = self
            presenter?.getAnnouncements()
        }
        
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func panGestureRecognizerAction(sender: UIPanGestureRecognizer) {
        let translation = sender.translation(in: view)
        
        if sender.state == .ended {
            if translation.y < 0 {
                goToModulesMenu()
            }
        }
        
        guard translation.y >= 0 else { return }
        
        swipeDownContainer.frame.origin = CGPoint(x: 0, y: self.pointOrigin!.y + translation.y)
       
        if sender.state == .ended {
            let dragVelocity = sender.velocity(in: view)
            if translation.y < 0 {
                goToModulesMenu()
            } else {
                if dragVelocity.y >= 20 {
                    UIView.animate(withDuration: 0.3) {
                        self.swipeDownContainer.frame.origin = self.pointOrigin ?? CGPoint(x: 0, y: 400)
                    }
                    refreshView()
                } else {
                    if translation.y >= 20 {
                        UIView.animate(withDuration: 0.3) {
                            self.swipeDownContainer.frame.origin = self.pointOrigin ?? CGPoint(x: 0, y: 400)
                        }
                        refreshView()
                    }
                }
            }
        }
    }
    
    private func refreshView(){
        
        
        
        self.activityIndicator.startAnimating()
        self.activityIndicator.isHidden = false
        
        guard ZWSConnectionChecker.networkIsAvailable() else {
            alertInternet()
            return
        }
        
        self.myFavoritesView.changeShimmerStatus(isLoading: true)
        self.mostUsedAppsView.isLoading = true
        self.mostUsedAppsView.collectionView.reloadData()
        isRefreshView = true
        let user = SessionInfo.shared.user
        presenter?.getPermissions(zeusId: user?.zeusId ?? "")
        itemsInHeader = 2
        gafetePermission = true
        assistancePermission = true
        reloadPermissionsInHeader()
        setupShimmer()
        if hasAnnouncements {
            secondsAnnouncements = 0
            currentAnnouncementIdx = 0
            timerAnnouncement?.invalidate()
            timerAnnouncement = nil
            NotificationCenter.default.post(name: NSNotification.Name("GoToStart"), object: nil, userInfo: ["idx" : 0])
            itemsForCarrousel = announcementsView.data.count
            announcementsView.reloadLayout()
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                self.startTimerAnnouncement()
            }
        }
    }
    
    private func setupShimmer() {
        circularQRButton.setShimmer()
        views.circularAssistanceButton.setShimmer()
        views.searchButton.isHidden = true
        views.sideMenuButton.isHidden = true
        views.nameUserLabel.isHidden = true
        views.registerEntranceLabel.isHidden = true
        if hasAnnouncements {
            announcementsView.addShimmer()
        }
        
        setupFavoritesNModules()
        HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .openView, action: .view)
    }
    
    lazy var onGoToFavoriteSelected: (_ permissionItem: PermissionMenuModel?) -> Void = { [weak self] (permissionItem) in
        guard let self = self else { return }
        guard let permissionItem = permissionItem else {
            return }
        
        let id = permissionItem.idPermission
        let name = permissionItem.name
        let metadata = convertDictionaryToJSONString(dictionary: ["id" : id, "name": name ?? ""])
        HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .tapFavorite, action: .click, metadata: metadata)
        permissionItem.childs = menuFrameworks.filter({$0.idPermission == id}).first?.childs ?? []
        openModule(permission: permissionItem)
    }
    
    lazy var onShouldOpenModulesMenu: (_ shouldOpenModules: Bool) -> Void = { [weak self] (shouldOpenModules) in
        guard let self = self else { return }
        self.shouldOpenModules = shouldOpenModules
    }
    
    lazy var onShowModulesMenu: (_ menu: [PermissionMenuModel]?) -> Void = { [weak self] (menu) in
        guard let self = self else { return }
        guard let menu = menu else {
            return }
        goToModulesMenu()
    }
    
    lazy var onSelectedFavorites: (_ permissionItem: [PermissionsViewModel]) -> Void = { [weak self] (permissionItem) in
        guard let self = self else { return }
        didSavePermissions()
    }
    
    
    lazy var onGoToFavoriteMenu: (_ shouldPresent: Bool) -> Void = { [weak self] shouldPresent in
        guard let self = self else { return }
        if shouldPresent {
            //MARK: Show new menu
            HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .tapEditFavorites, action: .click)
            let viewFavorites = FavoritesMenuViewController()
            viewFavorites.menuFrameworks = menuFrameworks
            viewFavorites.selectedFavorites = onSelectedFavorites
            viewFavorites.openModule()
        }
    }
    
    func setupFavoritesNModules(){
        self.myFavoritesView.goToFavoriteSelected = onGoToFavoriteSelected
        self.myFavoritesView.goToFavoriteMenu = onGoToFavoriteMenu
        self.mostUsedAppsView.goToFavoriteSelected = onGoToFavoriteSelected
        self.mostUsedAppsView.showModulesMenu = onShowModulesMenu
        
        self.myFavoritesView.changeShimmerStatus(isLoading: true)
    }
    
    func goToModulesMenu(){
        
        let allModulesViewController = AllModulesViewController()
        allModulesViewController.delegate = self
        allModulesViewController.menuFrameworks = self.menuFrameworks.sorted { ($0.name ?? "").localizedCaseInsensitiveCompare($1.name ?? "") == .orderedAscending }
        allModulesViewController.goToFavoriteSelected = onGoToFavoriteSelected
        allModulesViewController.shouldOpenModulesMenu = onShouldOpenModulesMenu
        allModulesViewController.openModule()
    }
    
    @objc func handleSwitchValueChanged(_ notification: Notification) {
        if let newFlow = notification.userInfo?["newFlow"] as? ZCIExternalZeusKeys {
            if newFlow == ZCIExternalZeusKeys.requestBiometric {
                ZCInterceptor.shared.startFlow(forAction: newFlow, navigateDelegate: self, withInfo: ["from": "sideBar"])
                return
            }
            ZCInterceptor.shared.startFlow(forAction: newFlow, navigateDelegate: self)
        } else if let flowKey = notification.userInfo?["newFlow"] as? ZeusCoreInterceptor.ZCIExternalZeusKeys {
            ZeusCoreInterceptor.Navigator.shared.startFlow(forAction: flowKey, navigateDelegate: self, withInfo: nil)
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        syncSocialNetwork()
        pointOrigin = self.swipeDownContainer.frame.origin
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.startNavigation()
        }
    }
    
    @objc func openProfileBadgeID() {
        presenter?.openProfileBadgeID(delegate: self, image: imageProfile)
    }
    
    
    
    private func alertInternet() {
        var alert = ZDSAlert()
        alert.primaryColor = .zeusPrimaryColor ?? .purple
        alert.title = "¡Lo sentimos!"
        alert.message = "Parece que ocurrió un problema y no se pudo completar la solicitud, por favor intenta nuevamente"
        alert.primaryTitle = "Entendido"
        alert.style = .none
        
        let view = alert.asUIKitViewController()
        view.modalPresentationStyle = .overCurrentContext
        view.modalTransitionStyle = .crossDissolve
        view.view.backgroundColor = .backgroundTransparency
        
        alert.onPrimaryAction = {
            
            self.activityIndicator.stopAnimating()
            self.activityIndicator.isHidden = true
            self.myFavoritesView.isHidden = true
            self.mostUsedAppsView.isHidden = true
            
            view.dismiss(animated: true)
        }
        
        alert.onSecundaryAction = {
            view.dismiss(animated: true)
        }
        
        self.present(view, animated: true) {}
    }
    
    private func validateSession() {
        presenter?.validateSession()
    }
    
    func startNavigation(){
        let appDelegate: AppDelegate? = UIApplication.shared.delegate as? AppDelegate
        appDelegate?.isFinishLaunching = true
        appDelegate?.didHomeAppear()
    }
    
    @objc func pushNotificationHandler(_ notification : NSNotification) {
        reloadNotifications()
    }
    
    func setupUI(){
        setupLayouts(views: views)
        //setMenuCollection()
        //setCommunicatesCollectionView()
        setUserInfo()
    }
    
    func setUserInfo(){
        setBusinessImage()
        setUserPhoto()
    }
    
    func setBusinessImage(){
        if let photo = SessionInfo.shared.company?.photo, photo != ""{
          views.logoBusinessImageView.kf.setImage(with: URL(string:photo))
        }
    }
    
    func setUserPhoto(){
        
        guard let photo = SessionInfo.shared.user?.photo, !photo.isEmpty else{
            
            guard let localPhoto = LocalFileManager.shared.imageFromFile(subDirectory: .profilePhoto) else{
                self.setAcronymLabel()
                return
            }
            DispatchQueue.main.async {
                self.imageProfile = localPhoto
                self.views.profileImageView.image = localPhoto
            }
            
            ProfilePhotoManager.shared.uploadPhoto(photo: localPhoto) { success in
            }
            
            return
        }
        
        storeLocalImage(photo: photo) { success in
            DispatchQueue.main.async {
                self.imageProfile = SessionInfo.shared.photoLocal
                self.views.profileImageView.image = SessionInfo.shared.photoLocal
            }
        }
    }
    
    func storeLocalImage(photo: String, completion: @escaping (Bool) -> Void) {
        
      LocalFileManager.shared.downloadFile(urlString: photo, subDirectory: .profilePhoto, fileName: .profilePhoto) { image, error in
            guard let image = image else{
                completion(false)
                return
            }
            SessionInfoQueries.shared.updateUser(zeusId: SessionInfo.shared.user?.zeusId ?? "", photo: photo, photoLocal: image)
            completion(true)
        }
    }
    
    func setAcronymLabel(){
        var acronym = ""
        let name = SessionInfo.shared.user?.name ?? ""
        
        let components = name.components(separatedBy: " ")
        if components.count >= 2 {
            if let firstLetter = components[0].first, let secondLetter = components[1].first {
                acronym = "\(firstLetter)\(secondLetter)"
            }
        }else{
            if let firstLetter = SessionInfo.shared.user?.name.first, let secondLetter = SessionInfo.shared.user?.lastName.first {
                acronym = "\(firstLetter)\(secondLetter)"
            }
        }
        views.acronymLabel.text = acronym
        views.profileCircleView.addSubview(views.profileBackgroudView)
        views.profileCircleView.addSubview(views.acronymLabel)
        
        NSLayoutConstraint.activate([
            views.acronymLabel.centerXAnchor.constraint(equalTo: views.profileCircleView.centerXAnchor, constant: 0),
            views.acronymLabel.centerYAnchor.constraint(equalTo: views.profileCircleView.centerYAnchor, constant: 0),
            views.profileBackgroudView.centerXAnchor.constraint(equalTo: views.profileCircleView.centerXAnchor, constant: 0),
            views.profileBackgroudView.centerYAnchor.constraint(equalTo: views.profileCircleView.centerYAnchor, constant: 0),
            views.profileBackgroudView.widthAnchor.constraint(equalToConstant: 72),
            views.profileBackgroudView.heightAnchor.constraint(equalToConstant: 72)
        ])
    }
    
    func setCommunicatesCollectionView() {
        communicatesCollectionView.dataSource = self
        communicatesCollectionView.delegate = self
        communicatesCollectionView.register(CommunicateCell.self, forCellWithReuseIdentifier: "CommunicateCell")
    }
    
    func setMenuCollection(){
        menuCollectionView.register(HomeViewCollectionViewCell.self,
                                    forCellWithReuseIdentifier: HomeViewCollectionViewCell.identifier)
        menuCollectionView.delegate = self
        menuCollectionView.dataSource = self
    }
    
    func setupLegalDocuments() {
        self.presenter?.setupLegalDocuments()
    }
    
    @objc func openHamburguerMenu() {
        HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .tapSideMenu, action: .click)
        guard let tabBarViewController = self.tabBarController as? TabBarViewController else {
            return
        }
        tabBarViewController.menuSlide = menuSlide
        tabBarViewController.openHamburguerMenu()
    }

    func didSelectItem(type: CarrouselModel, idx: Int) {
        /*switch idx {
        case 0:
            // Tarea
            Navigator.shared.startFlow(forAction: .particularGenericTask,
                                       navigateDelegate: self,
                                       withInfo: ["collaborator_id": SessionInfo.shared.user?.zeusId ?? "", "id_task": "2932"])
        case 1:
            // Capacitacion
            Navigator.shared.startFlow(forAction: .particularGenericTraining,
                                       navigateDelegate: self,
                                       withInfo: ["collaborator_id": SessionInfo.shared.user?.zeusId ?? "", "id_training": "2986"])
            
        case 2:
            let randomInt = Int.random(in: 1...2)
            if randomInt == 1 {
                let vc = ZDSAnnouncementWebView(nibName: nil, bundle: nil)
                vc.modalPresentationStyle = .fullScreen
                vc.url = "https://www.gruposalinas.com/"
                vc.titleView = "Prueba"
                self.present(vc, animated: true)
            } else {
                let swiftUIView = TipsView()
                let hostingController = UIHostingController(rootView: swiftUIView)
                hostingController.modalPresentationStyle = .fullScreen
                self.headerColor = .white
                self.present(hostingController, animated: true, completion: nil)
            }
        default:
            openModule(permission: PermissionMenuModel(idPermission: 82, name: nil, categoryColor: nil, order: 0, showChilds: 0, childs: []))
        }
        
        let metadata = convertDictionaryToJSONString(dictionary: ["position" : currentAnnouncementIdx, "name": "prueba", "id" : "82"])
        HomeEventCollector.send(category: .homeEvent, subCategory: .mainView, event: .tapBanner, action: .click, metadata: metadata)*/
    }
}


extension HomeViewController: HomeViewControllerPermission {
    func updateData() {
        presenter?.getMenuForSession()
    }
}

extension HomeViewController: BadgeIDViewDelegate {
    func didUploadImage(_ image: UIImage?) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: { [weak self] in
            self?.hideDSLoader()
        })
        imageProfile = image
        views.profileImageView.image = image
        views.profileBackgroudView.isHidden = true
        views.acronymLabel.isHidden = true
    }
}

extension HomeViewController: HomeViewControllerViewProtocol {
    
    func removeLoader() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: { [weak self] in
            self?.hideDSLoader()
        })
    }
    
    func setMenu(menuFrameworks: [PermissionMenuModel], menuSlide: [PermissionMenuModel]) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: { [weak self] in
            if !(self?.isRefreshView ?? false) {
                self?.hideDSLoader()
                self?.isRefreshView = false
            }
            self?.validateSession()
        })
        
        self.menuFrameworks = menuFrameworks
        self.menuSlide = menuSlide
        self.myFavoritesView.currentFavorites.removeAll()
        for permission in permissionsViewModel.favorites() {
            self.myFavoritesView.currentFavorites.append(PermissionMenuModel(idPermission: permission.id ?? -1, name: permission.name, categoryColor: "", order: 0, showChilds: 0, childs: [], badgePriority: 0))
        }
        
        self.myFavoritesView.setFavoriteOption(favorites: self.myFavoritesView.currentFavorites)
        let filtered = self.menuFrameworks.filter({ item in !self.myFavoritesView.currentFavorites.contains(where: { $0.idPermission == item.idPermission }) })
        
        self.mostUsedAppsView.menuFrameworks = filtered.sorted { ($0.name ?? "").localizedCaseInsensitiveCompare($1.name ?? "") == .orderedAscending }
        self.mostUsedAppsView.delegate = self
        self.myFavoritesView.isHidden = false
        self.mostUsedAppsView.isHidden = false
        DispatchQueue.main.async {
            self.activityIndicator.isHidden = true
            self.activityIndicator.stopAnimating()
            DispatchQueue.main.asyncAfter(deadline: .now() + 3, execute: { [weak self] in
                self?.myFavoritesView.changeShimmerStatus(isLoading: false)
                self?.mostUsedAppsView.isLoading = false
                self?.mostUsedAppsView.collectionView.reloadData()
                self?.views.reload()
            })
        }
    }
    
    func didSavePermissions(){
        self.myFavoritesView.currentFavorites.removeAll()
        self.myFavoritesView.configurBaseViews()
        for permission in permissionsViewModel.favorites() {
            self.myFavoritesView.currentFavorites.append(PermissionMenuModel(idPermission: permission.id ?? -1, name: permission.name, categoryColor: "", order: 0, showChilds: 0, childs: [], badgePriority: 0))
        }
        
        self.myFavoritesView.setFavoriteOption(favorites: self.myFavoritesView.currentFavorites)
        
        let filtered = self.menuFrameworks.filter({ item in !self.myFavoritesView.currentFavorites.contains(where: { $0.idPermission == item.idPermission }) })
        
        self.mostUsedAppsView.menuFrameworks = filtered.sorted { ($0.name ?? "").localizedCaseInsensitiveCompare($1.name ?? "") == .orderedAscending }
        
        DispatchQueue.main.async {
            self.mostUsedAppsView.collectionView.reloadData()
        }
    }
    
    func getPermissions() {
        NotificationCenter.default.addObserver(forName: NSNotification.Name("FinishPermissions"), object: nil, queue: nil) { _ in
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                self.circularQRButton.hideShimmer()
                self.views.circularAssistanceButton.hideShimmer()
                self.views.searchButton.isHidden = true
                self.views.sideMenuButton.isHidden = !PermissionSingleton.shared.getValueForHamburgueMenu()
                self.views.nameUserLabel.isHidden = false
                self.views.registerEntranceLabel.isHidden = false
                self.reloadPermissionsInHeader()
                if hasAnnouncements {
                    self.announcementsView.removeShimmer()
                }
            }
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("SetEntryPermission"), object: nil, queue: nil) { _ in
           
            if PermissionSingleton.shared.getValueForEntry() {
                assistancePermission = true
                itemsInHeader += 1
            } else {
                assistancePermission = false
            }
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("SetGafetePermission"), object: nil, queue: nil) { _ in
           
            if PermissionSingleton.shared.getValueForGafete() {
                gafetePermission = true
                itemsInHeader += 1
            } else {
                gafetePermission = false
            }
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("SetHamburguerPermission"), object: nil, queue: nil) { _ in
            //self.views.sideMenuButton.isHidden = !PermissionSingleton.shared.getValueForHamburgueMenu()
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("GoToStart"), object: nil, queue: nil) { _ in
           
            self.announcementsView.scrollToItem(at: IndexPath(row: 0, section: 0), at: .left, animated: true)
            secondsAnnouncements = 0
            currentAnnouncementIdx = 0
        }
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name("GoToAnnouncement"), object: nil, queue: nil) { not in
            if let idx = not.userInfo?["idx"] as? Int {
                self.announcementsView.scrollToItem(at: IndexPath(row: idx, section: 0), at: .left, animated: true)
            }
            
        }
        
    }
    
    func startTimerAnnouncement() {
        timerAnnouncement = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: { timer in
            secondsAnnouncements += 1
            if secondsAnnouncements >= 5 {
                secondsAnnouncements = 0
                currentAnnouncementIdx += 1
                if currentAnnouncementIdx >= itemsForCarrousel {
                    currentAnnouncementIdx = 0
                }
                NotificationCenter.default.post(name: NSNotification.Name("GoToAnnouncement"), object: nil, userInfo: ["idx" : currentAnnouncementIdx])
            }
        })
    }
    
    func reloadPermissionsInHeader() {
        if !gafetePermission {
            circularQRButton.removeAllConstraints()
            circularQRButton.removeFromSuperview()
            itemsInHeader -= 1
        } else {
            itemsInHeader += 1
            circularQRButton.removeAllConstraints()
            circularQRButton.removeFromSuperview()
            circularQRButton.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(circularQRButton)
            NSLayoutConstraint.activate([
                circularQRButton.topAnchor.constraint(equalTo: view.topAnchor, constant: screenFrame.height * 0.15),
                circularQRButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
                circularQRButton.heightAnchor.constraint(equalToConstant: screenFrame.height * 0.07),
                circularQRButton.widthAnchor.constraint(equalToConstant: screenFrame.height * 0.07),
            ])
            circularQRButton.iconImageView?.removeFromSuperview()
            circularQRButton.setupButton(iconName: "gafete")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
                self.view.layoutIfNeeded()
            }
        }
        
        if !assistancePermission {
            self.views.circularAssistanceButton.removeAllConstraints()
            self.views.circularAssistanceButton.removeFromSuperview()
            itemsInHeader -= 1
        } else {
            itemsInHeader += 1
            self.views.circularAssistanceButton.removeAllConstraints()
            self.views.circularAssistanceButton.removeFromSuperview()
            self.views.circularAssistanceButton.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(self.views.circularAssistanceButton)
            NSLayoutConstraint.activate([
                self.views.circularAssistanceButton.topAnchor.constraint(equalTo: view.topAnchor, constant: screenFrame.height * 0.15),
                self.views.circularAssistanceButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: gafetePermission ? -88 : -24),
                self.views.circularAssistanceButton.heightAnchor.constraint(equalToConstant: screenFrame.height * 0.07),
                self.views.circularAssistanceButton.widthAnchor.constraint(equalToConstant: screenFrame.height * 0.07),
            ])
            self.views.circularAssistanceButton.iconImageView?.removeFromSuperview()
            let currentIconName = AttendanceOpenClass.shared.getCurrentState().getIconName()
            self.views.circularAssistanceButton.setupButton(iconName: currentIconName)
            self.views.circularAssistanceButton.isEnabled = AttendanceOpenClass.shared.isEnableState()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
                self.views.circularAssistanceButton.layoutIfNeeded()
                self.view.layoutIfNeeded()
            }
        }
        moveViewTo(newX: (assistancePermission && gafetePermission) ? screenFrame.width * 0.6 : screenFrame.width * 0.8, view: waveView!)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
            self.waveView?.layoutIfNeeded()
            self.view.layoutIfNeeded()
        }
       
    }
    
    func moveViewTo(newX: CGFloat, view: UIView) {
        // Desactivar Auto Layout
        view.translatesAutoresizingMaskIntoConstraints = true
        
        // Actualizar el frame
        var frame = view.frame
        frame.origin.x = newX
        view.frame = frame
        
        // Aplicar los cambios de layout
        view.layoutIfNeeded()
    }
    
    func errorNetworkReintent(_ error: String) {
        
    }
    
    func showUniqueSessionAlert() {
        UIAlertController.showUDNDoubleWith(title: "Nueva sesión detectada",
                                            message: "Se ha detectado otra sesión iniciada, ¿Desea continuar en este dispositivo?",
                                            firstActionTitle: "Cancelar", secondActionTitle: "Continuar", firstActionHandler: { [] in
            SessionManager.logout()
        }, secondActionHandler:  { [weak self] in
            
            self?.dismiss(animated: false) {
                self?.presenter?.confirmUniqueSession()
                VersionValidator.checkAppVersion()
            }
        })
    }
    
    func setAnnouncements(announcements: [CarrouselModel]) {
        self.announcementsView.data = announcements
        refreshView()
    }
}

extension UIView {
    func removeSubview(withTag tag: Int) {
        if let viewWithTag = self.viewWithTag(tag) {
            viewWithTag.removeFromSuperview()
        }
    }
    
    func removeAllConstraints() {
        self.removeConstraints(self.constraints)
        self.translatesAutoresizingMaskIntoConstraints = false
    }
}

extension HomeViewController: AttendanceControlManagerProtocol {
    func presentingACFromViewController() -> UIViewController? { self }
    
    func isBiometricsNeeded() -> Bool {
        return CompanyStatusValidator.shared.isBiometricsNeeded
    }
}

extension HomeViewController: TipsDelegate {
    func goToAnnouncements() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            let parameters = ["delegate": self, "counter": 0] as [String : Any]
            ZeusCoreInterceptor.Navigator.shared.startFlow(forAction: ZCIExternalZeusKeys.comunicadosID, navigateDelegate: self, interruptorDatasource: nil, withInfo: parameters)
        }
    }
}

extension HomeViewController {
    
    private func addObservers() {
        addWillEnterForegroundObserver()
    }
    
    private func addWillEnterForegroundObserver() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appWillEnterForeground),
            name: UIApplication.willEnterForegroundNotification,
            object: nil
        )
    }
    
    @objc private func appWillEnterForeground() {
        syncSocialNetwork()
    }
    
    private func addDidAppEnterBackgroundObserver() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appDidEnterBackground),
            name: UIApplication.didEnterBackgroundNotification,
            object: nil
        )
    }

    @objc private func appDidEnterBackground() {
        syncSocialNetwork()
    }
}

extension HomeViewController {
    func syncSocialNetwork() {
        ZeusSocialNetworkSDK.sync()
    }
}


